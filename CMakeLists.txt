cmake_minimum_required(VERSION 3.1)
set(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/" "$ENV{QTDIR}" "${QTDIR}" "$ENV{QTDIR}/lib/cmake" "${QTDIR}/lib/cmake")

# default build type
if(CMAKE_BUILD_TYPE STREQUAL "")
  set(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING "Choose the type of build, options are: None (CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel." FORCE)
endif()

# compiler configurations
if(WIN32)
  set(CMAKE_USE_RELATIVE_PATHS true)
  set(CMAKE_SUPPRESS_REGENERATION true)
endif()

if(APPLE AND NOT ANDROID)
  set(CMAKE_SIZEOF_VOID_P 4)
  set(CMAKE_XCODE_ATTRIBUTE_GCC_VERSION "com.apple.compilers.llvm.clang.1_0")
  set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++11")
  set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
endif ()

include(CheckTypeSize)
CHECK_TYPE_SIZE("void*" OSMSCOUT_PTR_SIZE BUILTIN_TYPES_ONLY)
if(OSMSCOUT_PTR_SIZE EQUAL 8)
  set(OSMSCOUT_PLATFORM_X64 TRUE)
else ()
  set(OSMSCOUT_PLATFORM_X64 FALSE)
endif ()

include(CheckCXXCompilerFlag)
if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANGXX)
  set(OSMSCOUT_WARNING_FLAGS "-Wall -Winit-self -Wno-overloaded-virtual -Wcast-qual -Wwrite-strings -Wextra -Wno-unused-parameter -Wshadow -Wno-missing-field-initializers -Wno-long-long")
  if(EMSCRIPTEN)
    set(OSMSCOUT_WARNING_FLAGS "${OSMSCOUT_WARNING_FLAGS} -Wno-warn-absolute-paths")
  elseif(NOT APPLE)
    set(OSMSCOUT_WARNING_FLAGS "${OSMSCOUT_WARNING_FLAGS} -Wno-unused-but-set-parameter")
  endif()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OSMSCOUT_WARNING_FLAGS}")
endif()

if(MSVC)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /fp:fast /wd4251")
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Oi")
  if(CMAKE_CL_64)
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /bigobj")
	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /bigobj")
  endif()
  if(MSVC_VERSION GREATER 1500 OR MSVC_VERSION EQUAL 1500)
    option(OSMSCOUT_BUILD_MSVC_MP "Enable build with multiple processes in Visual Studio" TRUE)
  else()
    set(OSMSCOUT_BUILD_MSVC_MP FALSE CACHE BOOL "Compiler option /MP requires at least Visual Studio 2008 (VS9) or newer" FORCE)
  endif()
  if(OSMSCOUT_BUILD_MSVC_MP)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
  endif()
  add_definitions(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE -DDLL_EXPORT)
endif()

if(MINGW)
  add_definitions(-D_WIN32_WINNT=0x0600)
  if(NOT OSMSCOUT_PLATFORM_X64)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=i686")
  endif ()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpermissive -fno-tree-slp-vectorize -Wno-error=cast-qual -Wno-unused-local-typedefs")
endif()

if((CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANGXX) AND NOT MINGW)
  check_cxx_compiler_flag(-fvisibility=hidden OSMSCOUT_GCC_VISIBILITY)
  if(OSMSCOUT_GCC_VISIBILITY)
    execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE OSMSCOUT_GCC_VERSION)
    message(STATUS "Detected g++ ${OSMSCOUT_GCC_VERSION}")
    message(STATUS "Enabling GCC visibility flags")
    set(OSMSCOUT_GCC_VISIBILITY_FLAGS "-fvisibility=hidden")
    set(XCODE_ATTRIBUTE_GCC_SYMBOLS_PRIVATE_EXTERN "YES")
    string(TOLOWER "${CMAKE_BUILD_TYPE}" OSMSCOUT_BUILD_TYPE)
    if(OSMSCOUT_BUILD_TYPE STREQUAL "debug" AND OSMSCOUT_GCC_VERSION VERSION_LESS "4.2")
      message(STATUS "Skipping -fvisibility-inlines-hidden due to possible bug in g++ < 4.2")
    else()
      if(APPLE)
        message(STATUS "Skipping -fvisibility-inlines-hidden due to linker issues")
        set(XCODE_ATTRIBUTE_GCC_INLINES_ARE_PRIVATE_EXTERN[arch=x86_64] "YES")
      else()
        set(OSMSCOUT_VISIBILITY_FLAGS "${OSMSCOUT_GCC_VISIBILITY_FLAGS} -fvisibility-inlines-hidden")
        set(XCODE_ATTRIBUTE_GCC_INLINES_ARE_PRIVATE_EXTERN "YES")
      endif()
    endif()
  endif()
  if(OSMSCOUT_PLATFORM_X64 AND NOT APPLE)
    add_definitions(-fPIC)
  endif()
endif()


# postfix for debug builds
if(NOT APPLE)
  set(CMAKE_DEBUG_POSTFIX "d")
endif ()

# global variables
set(OSMSCOUT_BASE_DIR_SOURCE ${CMAKE_CURRENT_SOURCE_DIR})
set(OSMSCOUT_BASE_DIR_BUILD ${CMAKE_CURRENT_BINARY_DIR})
include_directories(${OSMSCOUT_BASE_DIR_BUILD}/include)

# feature detection (libraries, header, etc.)
include(features)

set(OSMSCOUT_BUILD_CORE OFF CACHE INTERNAL "" FORCE)
add_subdirectory(libosmscout)
set(OSMSCOUT_BUILD_IMPORT OFF CACHE INTERNAL "" FORCE)
if(${LIBXML2_FOUND} AND ${PROTOBUF_FOUND} AND ${ZLIB_FOUND})
  add_subdirectory(libosmscout-import)
endif()
set(OSMSCOUT_BUILD_MAP OFF CACHE INTERNAL "" FORCE)
add_subdirectory(libosmscout-map)
set(OSMSCOUT_BUILD_MAP_AGG OFF CACHE INTERNAL "" FORCE)
if(LIBAGG_FOUND)
  add_subdirectory(libosmscout-map-agg)
endif()
set(OSMSCOUT_BUILD_MAP_CAIRO OFF CACHE INTERNAL "" FORCE)
if(CAIRO_FOUND)
  add_subdirectory(libosmscout-map-cairo)
endif()
set(OSMSCOUT_BUILD_MAP_OPENGL OFF CACHE INTERNAL "" FORCE)
if(OPENGL_FOUND)
  add_subdirectory(libosmscout-map-opengl)
endif()
set(OSMSCOUT_BUILD_MAP_QT OFF CACHE INTERNAL "" FORCE)
if(Qt5Gui_FOUND)
  add_subdirectory(libosmscout-map-qt)
endif()
set(OSMSCOUT_BUILD_MAP_SVG OFF CACHE INTERNAL "" FORCE)
add_subdirectory(libosmscout-map-svg)
set(OSMSCOUT_BUILD_MAP_IOSX OFF CACHE INTERNAL "" FORCE)
if(APPLE)
#ntbf
endif()

set(OSMSCOUT_BUILD_TOOL_IMPORT OFF CACHE INTERNAL "" FORCE)
add_subdirectory(Import)
option(OSMSCOUT_BUILD_DEMOS "Enable build of demo applications" TRUE)
if(OSMSCOUT_BUILD_DEMOS)
  add_subdirectory(Demos)
endif()
set(OSMSCOUT_BUILD_TOOL_DUMPDATA OFF CACHE INTERNAL "" FORCE)
add_subdirectory(DumpData)
set(OSMSCOUT_BUILD_TOOL_OSMSCOUT2 OFF CACHE INTERNAL "" FORCE)
set(OSMSCOUT_BUILD_TOOL_STYLEEDITOR OFF CACHE INTERNAL "" FORCE)
if(Qt5Gui_FOUND)
  add_subdirectory(OSMScout2)
  add_subdirectory(StyleEditor)
endif()
option(OSMSCOUT_BUILD_TESTS "Enable build of test applications" ON)
if(OSMSCOUT_BUILD_TESTS)
  add_subdirectory(Tests)
endif()

find_package(Doxygen QUIET)
if(DOXYGEN_FOUND)
  option(OSMSCOUT_BUILD_DOC_API "Enable generation of api documentation" ON)
else()
  set(OSMSCOUT_BUILD_DOC_API OFF CACHE BOOL "Enable generation of api documentation" FORCE)
endif()
if(OSMSCOUT_BUILD_DOC_API)
  add_subdirectory(Documentation)
endif()

find_package(SWIG QUIET)
if(SWIG_FOUND)
  option(OSMSCOUT_BUILD_JAVA_BINDING "Enable generation of java binding" ON)
else()
  set(OSMSCOUT_BUILD_JAVA_BINDING OFF CACHE BOOL "Enable generation of java binding with SWIG" FORCE)
endif()
if(OSMSCOUT_BUILD_JAVA_BINDING)
  add_subdirectory(libosmscout-binding)
endif()

message(STATUS "libosmscout build configuration:")
message(STATUS "core library:                            ${OSMSCOUT_BUILD_CORE}")
message(STATUS "import library:                          ${OSMSCOUT_BUILD_IMPORT}")
message(STATUS "map drawing interface:                   ${OSMSCOUT_BUILD_MAP}")
message(STATUS " - Agg map drawing backend:              ${OSMSCOUT_BUILD_MAP_AGG}")
message(STATUS " - Cairo map drawing backend:            ${OSMSCOUT_BUILD_MAP_CAIRO}")
message(STATUS " - OpenGL map drawing backend:           ${OSMSCOUT_BUILD_MAP_OPENGL}")
message(STATUS " - Qt map drawing backend:               ${OSMSCOUT_BUILD_MAP_QT}")
message(STATUS " - SVG map drawing backend:              ${OSMSCOUT_BUILD_MAP_SVG}")
message(STATUS " - Map drawing backend for iOS and OS X: ${OSMSCOUT_BUILD_MAP_IOSX}")
message(STATUS "tools:")
message(STATUS " - Import:                               ${OSMSCOUT_BUILD_TOOL_IMPORT}")
message(STATUS " - DumpData:                             ${OSMSCOUT_BUILD_TOOL_DUMPDATA}")
message(STATUS " - OSMScout2:                            ${OSMSCOUT_BUILD_TOOL_OSMSCOUT2}")
message(STATUS " - StyleEditor:                          ${OSMSCOUT_BUILD_TOOL_STYLEEDITOR}")
message(STATUS "tests:                                   ${OSMSCOUT_BUILD_TESTS}")
message(STATUS "demos:                                   ${OSMSCOUT_BUILD_DEMOS}")
message(STATUS "bindings:")
message(STATUS " - Java binding:                         ${OSMSCOUT_BUILD_JAVA_BINDING}")
message(STATUS "documentation:                           ${OSMSCOUT_BUILD_DOC_API}")
