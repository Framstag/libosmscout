cmake_minimum_required(VERSION 3.1)

project(libosmscout C CXX)

# If we are called from conan, include and activate it cmake additions
if(EXISTS ${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
  message("Loading conan definitions...")
  include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
  conan_basic_setup()
endif()

set(CMAKE_VERBOSE_MAKEFILE OFF)

set(CMAKE_CXX_STANDARD_REQUIRED ON) # build should fail when compiler don't support standard defined by CMAKE_CXX_STANDARD
set(CMAKE_MACOSX_RPATH 1)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake/" "$ENV{QTDIR}" "${QTDIR}" "$ENV{QTDIR}/lib/cmake" "${QTDIR}/lib/cmake")

#
# default build type
if(CMAKE_BUILD_TYPE STREQUAL "")
  set(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING "Choose the type of build, options are: None (CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel." FORCE)
endif()

option(BUILD_SHARED_LIBS "Shared libraries " ON)  # SHARED lib default
option(BUILD_WITH_OPENMP "Check for OpenMP support " ON)
option(BUILD_IMPORT_TOOL_FOR_DISTRIBUTION "Import tool for distribution " OFF)
if(APPLE)
  option(BUILD_FRAMEWORKS "Enable build of libraries as frameworks" ON)
endif()

if(APPLE AND NOT ANDROID)
  set(CMAKE_SIZEOF_VOID_P 4)
  set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++17")
  set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
endif ()

# TODO: This will not work for cross-compiling :-/
include(CheckTypeSize)
CHECK_TYPE_SIZE("void*" OSMSCOUT_PTR_SIZE BUILTIN_TYPES_ONLY)
if(OSMSCOUT_PTR_SIZE EQUAL 8)
  set(OSMSCOUT_PLATFORM_X64 TRUE)
else ()
  set(OSMSCOUT_PLATFORM_X64 FALSE)
endif ()

include(CheckCXXCompilerFlag)
if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANGXX OR CMAKE_COMPILER_IS_GNUCC)
  set(OSMSCOUT_WARNING_FLAGS "-Wall -Winit-self -Wno-overloaded-virtual -Wcast-qual -Wwrite-strings -Wextra -Wno-long-long")
  if(EMSCRIPTEN)
    set(OSMSCOUT_WARNING_FLAGS "${OSMSCOUT_WARNING_FLAGS} -Wno-warn-absolute-paths")
  elseif(NOT APPLE)
    set(OSMSCOUT_WARNING_FLAGS "${OSMSCOUT_WARNING_FLAGS} -Wno-unused-but-set-parameter")
  endif()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OSMSCOUT_WARNING_FLAGS}")
endif()

# Enable Large file support
include(TestLargeFiles)
OPJ_TEST_LARGE_FILES(OPJ_HAVE_LARGEFILES)

if(MSVC)
  # Make sure C test using check_prototype_definition() will fail
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /we4028")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /fp:fast /wd4251")
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Oi")

  if(CMAKE_CL_64)
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /bigobj")
	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /bigobj")
  endif()

  if(MSVC_VERSION GREATER 1500 OR MSVC_VERSION EQUAL 1500)
    option(OSMSCOUT_BUILD_MSVC_MP "Enable build with multiple processes in Visual Studio" TRUE)
  else()
    set(OSMSCOUT_BUILD_MSVC_MP FALSE CACHE BOOL "Compiler option /MP requires at least Visual Studio 2008 (VS9) or newer" FORCE)
  endif()

  if(OSMSCOUT_BUILD_MSVC_MP)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
  endif()

  add_definitions(-D_WIN32_WINNT=0x0600)
  add_definitions(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE -DDLL_EXPORT -D_USE_MATH_DEFINES)
endif()

if(MINGW)
  add_definitions(-D_WIN32_WINNT=0x0600)

  if(NOT OSMSCOUT_PLATFORM_X64)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=i686")
    # provide more addressable memory on win 32bit builds
    # see https://msdn.microsoft.com/en-us/library/aa366778
    set(CMAKE_EXE_LINKER_FLAGS "-Wl,--large-address-aware")
  endif ()

  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpermissive -fno-tree-slp-vectorize -Wno-error=cast-qual -Wno-unused-local-typedefs")
endif()

if((CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANGXX OR CMAKE_COMPILER_IS_GNUCC) AND NOT MINGW)
  add_definitions( -Wall -pedantic )
  check_cxx_compiler_flag(-fvisibility=hidden OSMSCOUT_GCC_VISIBILITY)

  if(OSMSCOUT_GCC_VISIBILITY)
    execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE OSMSCOUT_GCC_VERSION)
    message(STATUS "Detected g++ ${OSMSCOUT_GCC_VERSION}")
    message(STATUS "Enabling GCC visibility flags")
    set(OSMSCOUT_GCC_VISIBILITY_FLAGS "-fvisibility=hidden")
    set(XCODE_ATTRIBUTE_GCC_SYMBOLS_PRIVATE_EXTERN "YES")
    string(TOLOWER "${CMAKE_BUILD_TYPE}" OSMSCOUT_BUILD_TYPE)

    if(OSMSCOUT_BUILD_TYPE STREQUAL "debug" AND OSMSCOUT_GCC_VERSION VERSION_LESS "4.2")
      message(STATUS "Skipping -fvisibility-inlines-hidden due to possible bug in g++ < 4.2")
    else()
      if(APPLE)
        message(STATUS "Skipping -fvisibility-inlines-hidden due to linker issues")
        set(XCODE_ATTRIBUTE_GCC_INLINES_ARE_PRIVATE_EXTERN[arch=x86_64] "YES")
      else()
        set(OSMSCOUT_VISIBILITY_FLAGS "${OSMSCOUT_GCC_VISIBILITY_FLAGS} -fvisibility-inlines-hidden")
        set(XCODE_ATTRIBUTE_GCC_INLINES_ARE_PRIVATE_EXTERN "YES")
      endif()
    endif()
  endif()
  if(NOT APPLE)
    add_definitions(-fPIC)
  endif()
endif()

# Prever non-legacy OpenGL libraries
set(OpenGL_GL_PREFERENCE "GLVND")

# debug build?
option(DEBUG_LABEL_LAYOUTER "Print extra debug messages during label layouting" OFF)
if (DEBUG_LABEL_LAYOUTER)
  add_definitions( -DDEBUG_LABEL_LAYOUTER)
endif()

option(DEBUG_GROUNDTILES "Print extra debug messages while rendering ground tiles" OFF)
if (DEBUG_GROUNDTILES)
  add_definitions( -DDEBUG_GROUNDTILES)
endif()

option(DEBUG_COASTLINE "Print extra debug messages while importing coastline" OFF)
if (DEBUG_COASTLINE)
  add_definitions( -DDEBUG_COASTLINE)
endif()

option(DEBUG_TILING "Print extra debug messages related with map tiles" OFF)
if (DEBUG_TILING)
  add_definitions( -DDEBUG_TILING)
endif()

option(DEBUG_ROUTING "Print extra debug messages while routing" OFF)
if (DEBUG_ROUTING)
  add_definitions( -DDEBUG_ROUTING)
endif()

# see https://doc.qt.io/qtcreator/creator-debugging-qml.html for more details
option(QT_QML_DEBUG "Build with QML debugger support" OFF)
if (QT_QML_DEBUG)
  add_definitions( -DQT_QML_DEBUG)
endif()

# prefer static libraries if making import tool
if(BUILD_IMPORT_TOOL_FOR_DISTRIBUTION AND (CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANGXX OR CMAKE_COMPILER_IS_GNUCC))
  SET(CMAKE_FIND_LIBRARY_SUFFIXES .a ${CMAKE_FIND_LIBRARY_SUFFIXES})
endif()

# postfix for debug builds
if(NOT CMAKE_DEBUG_POSTFIX)
    if(APPLE)
        set(CMAKE_DEBUG_POSTFIX _debug)
    else()
        set(CMAKE_DEBUG_POSTFIX d)
    endif()
endif()

# global variables
set(OSMSCOUT_BASE_DIR_SOURCE ${CMAKE_CURRENT_SOURCE_DIR})
set(OSMSCOUT_BASE_DIR_BUILD ${CMAKE_CURRENT_BINARY_DIR})
include_directories(${OSMSCOUT_BASE_DIR_BUILD}/include)

# feature detection (libraries, header, etc.)
include(features)

set(OSMSCOUT_BUILD_CORE OFF CACHE INTERNAL "" FORCE)
add_subdirectory(libosmscout)

option(OSMSCOUT_BUILD_IMPORT "Enable build of import library" ON)
if(OSMSCOUT_BUILD_IMPORT)
  set(OSMSCOUT_BUILD_IMPORT OFF CACHE INTERNAL "" FORCE)
  add_subdirectory(libosmscout-import)
endif()

option(OSMSCOUT_BUILD_TEST "Enable build of test library" ON)
if(OSMSCOUT_BUILD_TEST)
  set(OSMSCOUT_BUILD_TEST OFF CACHE INTERNAL "" FORCE)
  add_subdirectory(libosmscout-test)
endif()

option(OSMSCOUT_BUILD_GPX "Enable build of gpx library" ON)
if(OSMSCOUT_BUILD_GPX)
  set(OSMSCOUT_BUILD_GPX OFF CACHE INTERNAL "" FORCE)
  add_subdirectory(libosmscout-gpx)
endif()

set(OSMSCOUT_BUILD_MAP OFF CACHE INTERNAL "" FORCE)
add_subdirectory(libosmscout-map)

if(LIBAGG_FOUND AND LIBAGGFT2_LIBRARIES AND FREETYPE_FOUND AND OSMSCOUT_BUILD_MAP)
  set(OSMSCOUT_BUILD_MAP_AGG_CACHE ON)
else()
  set(OSMSCOUT_BUILD_MAP_AGG_CACHE OFF)
endif()

option(OSMSCOUT_BUILD_MAP_AGG "Enable build of agg map drawing backend" ${OSMSCOUT_BUILD_MAP_AGG_CACHE})
if(OSMSCOUT_BUILD_MAP_AGG)
  add_subdirectory(libosmscout-map-agg)
endif()

if(CAIRO_FOUND AND OSMSCOUT_BUILD_MAP)
  set(OSMSCOUT_BUILD_MAP_CAIRO_CACHE ON)
else()
  set(OSMSCOUT_BUILD_MAP_CAIRO_CACHE OFF)
endif()

option(OSMSCOUT_BUILD_MAP_CAIRO "Enable build of cairo map drawing backend" ${OSMSCOUT_BUILD_MAP_CAIRO_CACHE})
if(OSMSCOUT_BUILD_MAP_CAIRO)
  add_subdirectory(libosmscout-map-cairo)
endif()

if(OPENGL_FOUND AND GLEW_FOUND AND GLM_FOUND AND GLFW_FOUND AND OSMSCOUT_BUILD_MAP)
  set(OSMSCOUT_BUILD_MAP_OPENGL_CACHE ON)
else()
  set(OSMSCOUT_BUILD_MAP_OPENGL_CACHE OFF)
endif()

option(OSMSCOUT_BUILD_MAP_OPENGL "Enable build of OpenGL map drawing backend" ${OSMSCOUT_BUILD_MAP_OPENGL_CACHE})
if(OSMSCOUT_BUILD_MAP_OPENGL)
  add_subdirectory(libosmscout-map-opengl)
endif()

if(Direct2D_FOUND AND OSMSCOUT_BUILD_MAP AND MSVC)
  set(OSMSCOUT_BUILD_MAP_DIRECTX_CACHE ON)
else()
  set(OSMSCOUT_BUILD_MAP_DIRECTX_CACHE OFF)
endif()
option(OSMSCOUT_BUILD_MAP_DIRECTX "Enable build of DirectX map drawing backend" ${OSMSCOUT_BUILD_MAP_DIRECTX_CACHE})
if(OSMSCOUT_BUILD_MAP_DIRECTX)
  message("DirectX root dir: ${DirectX_ROOT_DIR}")
  message("DirectX includes: ${Direct2D_INCLUDE_DIRS}")
  message("DirectX libs:     ${Direct2D_LIBRARIES}")

  add_subdirectory(libosmscout-map-directx)
endif()

if(Qt5Gui_FOUND AND Qt5Svg_FOUND AND OSMSCOUT_BUILD_MAP)
  set(OSMSCOUT_BUILD_MAP_QT_CACHE ON)
else()
  set(OSMSCOUT_BUILD_MAP_QT_CACHE OFF)
endif()
option(OSMSCOUT_BUILD_MAP_QT "Enable build of Qt map drawing backend" ${OSMSCOUT_BUILD_MAP_QT_CACHE})
if(OSMSCOUT_BUILD_MAP_QT)
  add_subdirectory(libosmscout-map-qt)
endif()

if(Qt5Core_FOUND AND Qt5Gui_FOUND AND Qt5Quick_FOUND AND Qt5Multimedia_FOUND AND OSMSCOUT_BUILD_MAP_QT)
  set(OSMSCOUT_BUILD_CLIENT_QT_CACHE ON)
else()
  set(OSMSCOUT_BUILD_CLIENT_QT_CACHE OFF)
endif()
option(OSMSCOUT_BUILD_CLIENT_QT "Enable build of Qt client library" ${OSMSCOUT_BUILD_CLIENT_QT_CACHE})
if(OSMSCOUT_BUILD_CLIENT_QT)
  add_subdirectory(libosmscout-client-qt)
endif()

option(OSMSCOUT_BUILD_MAP_SVG "Enable build of SVG map drawing backend" ${OSMSCOUT_BUILD_MAP})
if(OSMSCOUT_BUILD_MAP_SVG)
  add_subdirectory(libosmscout-map-svg)
endif()

if(OSMSCOUT_BUILD_MAP_QT AND OSMSCOUT_BUILD_CLIENT_QT AND Qt5Core_FOUND AND Qt5Gui_FOUND AND Qt5Widgets_FOUND AND Qt5Qml_FOUND AND Qt5Quick_FOUND)
  set(OSMSCOUT_BUILD_TOOL_OSMSCOUT2_CACHE ON)
else()
  set(OSMSCOUT_BUILD_TOOL_OSMSCOUT2_CACHE OFF)
endif()

if(OSMSCOUT_BUILD_MAP_QT AND OSMSCOUT_BUILD_CLIENT_QT AND Qt5Core_FOUND AND Qt5Gui_FOUND AND Qt5Widgets_FOUND AND Qt5Qml_FOUND AND Qt5Quick_FOUND)
  set(OSMSCOUT_BUILD_TOOL_STYLEEDITOR_CACHE ON)
else()
  set(OSMSCOUT_BUILD_TOOL_STYLEEDITOR_CACHE OFF)
endif()

if(APPLE)
  option(OSMSCOUT_BUILD_MAP_IOSX "Enable build of iOS/OSX map drawing backend" ${OSMSCOUT_BUILD_MAP})
  if(OSMSCOUT_BUILD_MAP_IOSX)
    add_subdirectory(libosmscout-map-iosx)
  endif()
else()
  set(OSMSCOUT_BUILD_MAP_IOSX OFF CACHE INTERNAL "" FORCE)
endif()

if(GPERFTOOLS_FOUND)
  set(GPERFTOOLS_USAGE ON)
else()
  set(GPERFTOOLS_USAGE OFF)
endif()

option(OSMSCOUT_BUILD_TOOL_IMPORT "Enable build of import applications" ${OSMSCOUT_BUILD_IMPORT})
if(OSMSCOUT_BUILD_TOOL_IMPORT)
  add_subdirectory(Import)
  add_subdirectory(BasemapImport)
endif()

option(OSMSCOUT_BUILD_DEMOS "Enable build of demo applications" TRUE)
if(OSMSCOUT_BUILD_DEMOS)
  add_subdirectory(Demos)
endif()

option(OSMSCOUT_BUILD_TOOL_DUMPDATA "Enable build of DumpData tool" TRUE)
if(OSMSCOUT_BUILD_TOOL_DUMPDATA)
  add_subdirectory(DumpData)
endif()

option(OSMSCOUT_BUILD_TOOL_PUBLICTRANSPORTMAP "Enable build of PublicTransportMap tool" TRUE)
if(OSMSCOUT_BUILD_TOOL_PUBLICTRANSPORTMAP)
  add_subdirectory(PublicTransportMap)
endif()

option(OSMSCOUT_BUILD_TOOL_OSMSCOUT2 "Enable build of OSMSCout2 demo" ${OSMSCOUT_BUILD_TOOL_OSMSCOUT2_CACHE})
if(OSMSCOUT_BUILD_TOOL_OSMSCOUT2)
  add_subdirectory(OSMScout2)
endif()

option(OSMSCOUT_BUILD_TOOL_OSMSCOUTOPENGL "Enable build of OSMScoutOpenGL applications" ${OSMSCOUT_BUILD_MAP_OPENGL})
if(OSMSCOUT_BUILD_TOOL_OSMSCOUTOPENGL)
  add_subdirectory(OSMScoutOpenGL)
endif()

option(OSMSCOUT_BUILD_TOOL_STYLEEDITOR "Enable build of StyleEditor application" ${OSMSCOUT_BUILD_TOOL_STYLEEDITOR_CACHE})
if(OSMSCOUT_BUILD_TOOL_STYLEEDITOR)
  add_subdirectory(StyleEditor)
endif()

option(OSMSCOUT_BUILD_TESTS "Enable build of test applications" ON)
if(OSMSCOUT_BUILD_TESTS)
  enable_testing()
  add_subdirectory(Tests)
endif()

if(DOXYGEN_FOUND)
  set(OSMSCOUT_BUILD_DOC_API_CACHE ON)
else()
  set(OSMSCOUT_BUILD_DOC_API_CACHE OFF)
endif()
option(OSMSCOUT_BUILD_DOC_API "Enable generation of api documentation" ${OSMSCOUT_BUILD_DOC_API_CACHE})
if(OSMSCOUT_BUILD_DOC_API)
  add_subdirectory(Documentation)
endif()

if (HUGO_PATH)
  set(OSMSCOUT_BUILD_WEBPAGE_CACHE ON)
else()
  set(OSMSCOUT_BUILD_WEBPAGE_CACHE OFF)
endif()
option(OSMSCOUT_BUILD_WEBPAGE "Enable generation of webpage" ${OSMSCOUT_BUILD_WEBPAGE_CACHE})
if(OSMSCOUT_BUILD_WEBPAGE)
  add_subdirectory(webpage)
endif()

if(SWIG_FOUND AND JNI_FOUND)
  set(OSMSCOUT_BUILD_BINDING_JAVA_CACHE ON)
else()
  set(OSMSCOUT_BUILD_BINDING_JAVA_CACHE OFF)
endif()
option(OSMSCOUT_BUILD_BINDING_JAVA "Enable generation of java binding" ${OSMSCOUT_BUILD_BINDING_JAVA_CACHE})

if(SWIG_FOUND AND MSVC)
  set(OSMSCOUT_BUILD_BINDING_CSHARP_CACHE ON)
else()
  set(OSMSCOUT_BUILD_BINDING_CSHARP_CACHE OFF)
endif()
option(OSMSCOUT_BUILD_BINDING_CSHARP "Enable generation of c# binding" ${OSMSCOUT_BUILD_BINDING_CSHARP_CACHE})

add_subdirectory(libosmscout-binding)
add_subdirectory(libosmscout-map-binding)

if(MATLAB_FOUND)
  set(OSMSCOUT_BUILD_EXTERN_MATLAB_CACHE ON)
else()
  set(OSMSCOUT_BUILD_EXTERN_MATLAB_CACHE OFF)
endif()
option(OSMSCOUT_BUILD_EXTERN_MATLAB "Enable generation of MATLAB mex function" ${OSMSCOUT_BUILD_EXTERN_MATLAB_CACHE})
add_subdirectory(libosmscout-extern)

# display build configuration
message(STATUS "libosmscout build configuration:")
message(STATUS "Shared libraries:                ${BUILD_SHARED_LIBS}")
if(APPLE)
  message(STATUS "Build frameworks:                ${BUILD_FRAMEWORKS}")
endif()

message(STATUS "Qt libraries:")
message(STATUS " - Core:                         ${Qt5Core_FOUND}")
message(STATUS " - Gui:                          ${Qt5Gui_FOUND}")
message(STATUS " - Svg:                          ${Qt5Svg_FOUND}")
message(STATUS " - Widgets:                      ${Qt5Widgets_FOUND}")
message(STATUS " - Qml:                          ${Qt5Qml_FOUND}")
message(STATUS " - Quick:                        ${Qt5Quick_FOUND}")
message(STATUS " - Multimedia:                   ${Qt5Multimedia_FOUND}")

message(STATUS "core library:                    ${OSMSCOUT_BUILD_CORE}")
if (OSMSCOUT_BUILD_CORE)
  message(STATUS " - marisa support:               ${MARISA_FOUND}")
endif()
message(STATUS "import library:                  ${OSMSCOUT_BUILD_IMPORT}")
if (OSMSCOUT_BUILD_IMPORT)
  message(STATUS " - libxml2 support:              ${LIBXML2_FOUND}")
  message(STATUS " - protobuf support:             ${PROTOBUF_FOUND}")
endif()
message(STATUS "gpx library:                     ${OSMSCOUT_BUILD_GPX}")
message(STATUS " - libxml2 support:              ${LIBXML2_FOUND}")
message(STATUS "map drawing interface:           ${OSMSCOUT_BUILD_MAP}")
message(STATUS " - Agg map drawing backend:      ${OSMSCOUT_BUILD_MAP_AGG}")
message(STATUS " - Cairo map drawing backend:    ${OSMSCOUT_BUILD_MAP_CAIRO}")
message(STATUS " - OpenGL map drawing backend:   ${OSMSCOUT_BUILD_MAP_OPENGL}")
message(STATUS " - DirectX map drawing backend:  ${OSMSCOUT_BUILD_MAP_DIRECTX}")
message(STATUS " - Qt map drawing backend:       ${OSMSCOUT_BUILD_MAP_QT}")
message(STATUS " - SVG map drawing backend:      ${OSMSCOUT_BUILD_MAP_SVG}")
message(STATUS " - OS X/iOS map drawing backend: ${OSMSCOUT_BUILD_MAP_IOSX}")
message(STATUS "client libraries:")
message(STATUS " - Qt client library:            ${OSMSCOUT_BUILD_CLIENT_QT}")
message(STATUS "tools:")
message(STATUS " - Import/Import:                ${OSMSCOUT_BUILD_TOOL_IMPORT}")
message(STATUS " - Import/BasemapImport:         ${OSMSCOUT_BUILD_TOOL_IMPORT}")
message(STATUS " - DumpData:                     ${OSMSCOUT_BUILD_TOOL_DUMPDATA}")
message(STATUS " - OSMScout2:                    ${OSMSCOUT_BUILD_TOOL_OSMSCOUT2}")
message(STATUS " - OSMScoutOpenGL:               ${OSMSCOUT_BUILD_TOOL_OSMSCOUTOPENGL}")
message(STATUS " - StyleEditor:                  ${OSMSCOUT_BUILD_TOOL_STYLEEDITOR}")
message(STATUS "tests:                           ${OSMSCOUT_BUILD_TESTS}")
message(STATUS "demos:                           ${OSMSCOUT_BUILD_DEMOS}")
message(STATUS " - heap profiler (Gperftools)    ${GPERFTOOLS_USAGE}")
message(STATUS "bindings:")
message(STATUS " - Java binding:                 ${OSMSCOUT_BUILD_BINDING_JAVA}")
message(STATUS " - C# binding:                   ${OSMSCOUT_BUILD_BINDING_CSHARP}")
message(STATUS "external interfaces:")
message(STATUS " - MATLAB mex function:          ${OSMSCOUT_BUILD_EXTERN_MATLAB}")
message(STATUS "documentation:                   ${OSMSCOUT_BUILD_DOC_API}")
message(STATUS "webpage:                         ${OSMSCOUT_BUILD_WEBPAGE}")

install(DIRECTORY ${CMAKE_SOURCE_DIR}/stylesheets DESTINATION share)
