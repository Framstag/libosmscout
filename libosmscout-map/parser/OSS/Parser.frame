-->begin

#if !defined(-->prefixPARSER_H)
#define -->prefixPARSER_H

-->headerdef

#include <osmscoutmap/oss/Scanner.h>

#include <osmscoutmap/StyleConfig.h>

#ifdef CONST
  #undef CONST
#endif

-->namespace_open

class Errors
{
public:
  class Err
  {
  public:
    enum Type {
      Symbol,
      Error,
      Warning,
      Exception
    };

  public:
    Type        type;
    int         line;
    int         column;
    std::string text;
  };

public:
  std::list<Err> errors;
  bool           hasErrors=false;
  Log            log;

public:
  explicit Errors(const Log &log);
  void SynErr(int line, int col, int n);
  void Error(int line, int col, const char *s);
  void Warning(int line, int col, const char *s);
  void Warning(const char *s);
  void Exception(const char *s);

};

class Parser
{
private:
-->constantsheader
  TokenRef dummyToken;
  int      errDist;
  int      minErrDist;
  Scanner  *scanner;
  TokenRef t;  // last recognized token
  TokenRef la; // lookahead token

  osmscout::ColorPostprocessor colorPostprocessor;

  void SynErr(int n);

  void Get();
  void Expect(int n);
  bool StartOf(int s);
  void ExpectWeak(int n, int follow);
  bool WeakSeparator(int n, int syFol, int repFol);

  osmscout::Color PostprocessColor(const osmscout::Color& color) const;

public:
  Errors  *errors;

-->declarations

  Parser(Scanner *scanner,
         const std::string& filename,
         StyleConfig& config,
         osmscout::ColorPostprocessor colorPostprocessor=nullptr,
         const Log &log=osmscout::log);
  ~Parser();

  void SemErr(const char* msg);
  void SemWarning(const char* msg);

-->productionsheader
  void Parse();

};

-->namespace_close

#endif // !defined(COCO_PARSER_H__)

-->implementation
-->begin
/*
  This source is part of the libosmscout library
  Copyright (C) 2011  Tim Teulings

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*/

#include <osmscoutmap/oss/Parser.h>

#include <sstream>

#include <osmscout/system/Assert.h>

#include <osmscout/log/Logger.h>
#include <osmscout/util/String.h>

#include <osmscoutmap/oss/Scanner.h>

-->namespace_open

void Parser::SynErr(int n)
{
  if (errDist >= minErrDist) {
    errors->SynErr(la->line, la->col, n);
  }
  errDist = 0;
}

void Parser::SemErr(const char* msg)
{
  if (!state) {
    return;
  }

  if (errDist >= minErrDist) {
    errors->Error(t->line, t->col, msg);
  }
  errDist = 0;
}

void Parser::SemWarning(const char* msg)
{
  if (!state) {
    return;
  }

  errors->Warning(t->line, t->col, msg);
}

void Parser::Get()
{
  for (;;) {
    t = la;
    la = scanner->Scan();
    if (la->kind <= maxT) {
      ++errDist;
      break;
    }
-->pragmas
    if (dummyToken != t) {
      dummyToken->kind = t->kind;
      dummyToken->pos = t->pos;
      dummyToken->col = t->col;
      dummyToken->line = t->line;
      dummyToken->next = NULL;
      coco_string_delete(dummyToken->val);
      dummyToken->val = coco_string_create(t->val);
      t = dummyToken;
    }
    la = t;
  }
}

void Parser::Expect(int n)
{
  if (la->kind==n) {
    Get();
  }
  else {
    SynErr(n);
  }
}

void Parser::ExpectWeak(int n, int follow)
{
  if (la->kind == n) {
    Get();
  }
  else {
    SynErr(n);
    while (!StartOf(follow)) {
      Get();
    }
  }
}

bool Parser::WeakSeparator(int n, int syFol, int repFol)
{
  if (la->kind == n) {
    Get();
    return true;
  }
  else if (StartOf(repFol)) {
    return false;
  }
  else {
    SynErr(n);
    while (!(StartOf(syFol) || StartOf(repFol) || StartOf(0))) {
      Get();
    }
    return StartOf(syFol);
  }
}

-->productions

void Parser::Parse()
{
  t = NULL;
  la = dummyToken = std::make_shared<Token>();
  la->val = coco_string_create("Dummy Token");
  Get();
-->parseRoot
}

Parser::Parser(Scanner *scanner,
               const std::string& filename,
               StyleConfig& config,
               osmscout::ColorPostprocessor colorPostprocessor,
               const Log &log)
 : filename(filename),
   config(config)
{
-->constants
  dummyToken = NULL;
  t = la = NULL;
  minErrDist = 2;
  errDist = minErrDist;
  this->scanner = scanner;
  errors = new Errors(log);
  this->colorPostprocessor=colorPostprocessor;
}

bool Parser::StartOf(int s)
{
  const bool T = true;
  const bool x = false;

-->initialization

  return set[s][la->kind];
}

Parser::~Parser()
{
  delete errors;
}

osmscout::Color Parser::PostprocessColor(const osmscout::Color& color) const
{
  if (colorPostprocessor!=nullptr) {
    return (*colorPostprocessor)(color);
  }
  else {
    return color;
  }
}

Errors::Errors(const Log &log)
 : log(log)
{
  // no code
}

void Errors::SynErr(int line, int col, int n)
{
  char* s;
  switch (n) {
-->errors
    default:
    {
      std::stringstream buffer;

      buffer << "error " << n;

      s = coco_string_create(buffer.str().c_str());
    }
    break;
  }

  Err error;

  error.type=Err::Symbol;
  error.line=line;
  error.column=col;
  error.text=s;

  coco_string_delete(s);

  log.Error() << error.line << "," << error.column << " " << "Symbol: " << error.text;

  errors.push_back(error);
  hasErrors=true;
}

void Errors::Error(int line, int col, const char *s)
{
  Err error;

  error.type=Err::Error;
  error.line=line;
  error.column=col;
  error.text=s;

  log.Error() << error.line << "," << error.column << " " << "Error: " << error.text;

  errors.push_back(error);
  hasErrors=true;
}

void Errors::Warning(int line, int col, const char *s)
{
  Err error;

  error.type=Err::Warning;
  error.line=line;
  error.column=col;
  error.text=s;

  log.Warn() << error.line << "," << error.column << " " << "Warning: " << error.text;

  errors.push_back(error);
}

void Errors::Warning(const char *s)
{
  Err error;

  error.type=Err::Warning;
  error.line=0;
  error.column=0;
  error.text=s;

  log.Warn() << error.line << "," << error.column << " " << "Warning: " << error.text;

  errors.push_back(error);
}

void Errors::Exception(const char* s)
{
  Err error;

  error.type=Err::Exception;
  error.line=0;
  error.column=0;
  error.text=s;

  log.Error() << error.line << "," << error.column << " " << "Exception: " << error.text;

  errors.push_back(error);
  hasErrors=true;
}

-->namespace_close
